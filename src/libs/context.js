import EventSystem from './events'

export default class UnityContext extends EventSystem {
  unityInstance = null
  htmlCanvasElement = null
  
  /**
   * Creates a new Unity Context instance
   * @param {object} unityConfig The Unity Config
   * @param {string} unityConfig.loaderUrl The url to the build json file generated by Unity
   * @param {string} unityConfig.dataUrl The url to the build data file generated by Unity
   * @param {string} unityConfig.frameworkUrl The url to the framework file generated by Unity
   * @param {string} unityConfig.codeUrl The url to the unity code file generated by Unity
   * @param {string} unityConfig.streamingAssetsUrl The url where the streaming assets can be found
   * @param {string} unityConfig.companyName The applications company name
   * @param {string} unityConfig.productName The applications product name
   * @param {string} unityConfig.productVersion The applications product version
   * @param {IWebGLContextAttributes} unityConfig.webglContextAttributes This object allow you to configure WebGLRenderingContext creation options
   */
  constructor(unityConfig) {
    super()
    this.unityConfig = unityConfig
  }

  send(objectName, methodName, params) {
    if (this.unityInstance !== null) {
      if (params === undefined || params === null) {
        this.unityInstance.SendMessage(objectName, methodName)
      } else {
        const _params = typeof params === 'object' ? JSON.stringify(params) : params
        this.unityInstance.SendMessage(objectName, methodName, _params)
      }
    }
    return this
  }

  requestPointerLock() {
    if (this.htmlCanvasElement !== null) {
      this.htmlCanvasElement.requestPointerLock()
    }
  }
  
  /**
   * Takes a screenshot of the canvas and returns a data URL containing image
   * data. The image data is in .png format unless otherwise specified.
   * @param {string} dataType The image format of the screenshot, ["image/png" | "image/jpeg" | "image/webp"]
   * @param {number} quality The quality of the jpg or webp screenshot
   * @returns a data URL containing image data of a snapshot of the canvas
   */
  takeScreenshot(dataType, quality) {
    if (this.htmlCanvasElement !== null) {
      if (this.unityConfig.webglContextAttributes?.preserveDrawingBuffer !== true) {
        console.warn("Taking a screenshot requires 'preserveDrawingBuffer'.")
      }
      return this.htmlCanvasElement.toDataURL(dataType, quality)
    }
    return null
  }

  setFullscreen(enabled) {
    if (this.unityInstance !== null) {
      this.unityInstance.SetFullscreen(enabled ? 1 : 0)
    }
  }

  quitUnityInstance() {
    if (this.unityInstance !== null) {
      this.unityInstance.Quit().then(() => {
        this.unityInstance = null
        this.dispatch('quitted')
      })
    }
  }
}
